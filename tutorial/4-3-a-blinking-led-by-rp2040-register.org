* Blinking LED by using the =RP2040= register

It's time to run the first demo:

** c-demo

Go to [[file:../c-demos/blinking-led-register/README.org][c-demos/blinking-led-register/README]]


** zig-demo

Go to [[file:../zig-demos/README.org][zig-demos/README.org]]


** Open =minicom= to see start blinking and see the logs

After compiling and uploading the program (~.uf2~) to the PICO, you still don't see the LED blinking, that's because that program is blocked by the ~stdio_init_all();~ until USB is connected and =minicom= (or another serial port tool) is running and attached to the correct serial device, that's because the ~PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS=-1~ setting is in the =CMakelists.txt=.

Run the ~./minicom.sh~ to see how to use it:

#+BEGIN_SRC bash
  ./minicom.sh

  # >>>
  # >>> [ Usage ]
  # >>>
  # >>> Linux: doas ./minicom.sh /dev/YOUR_TTY_DEVICE
  # >>> MacOS: ./minicom.sh /dev/YOUR_TTY_DEVICE
  # >>>
  # >>> [ Example ]
  # >>>
  # >>> Linux: doas ./minicom.sh /dev/ttyACM0
  # >>> MacOS: ./minicom.sh /dev/tty.usbmodem14701
  # >>>
#+END_SRC

Once the =minicom= is running and attached to your conntect USB/serial device, you should see the blinking and the following logs:

#+BEGIN_SRC bash
  # Try to connect to TTY device: /dev/ttyACM0

  # Welcome to minicom 2.9

  # OPTIONS: I18n
  # Compiled on Sep 23 2023, 19:55:08.
  # Port /dev/ttyACM0, 16:09:54

  # Press CTRL-A Z for help on special keys

  # >>> [ blinking-led-register ]

  # >>> Reset control register value:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0x00 bits: 00000000000000000000000000000000
  # >>> Reset done register value:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0x1FFFFFF bits: 00000001111111111111111111111111

  # >>> Reset control register value after only enable necessary peripherals:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0xD34C1D bits: 00000000110100110100110000011101

  # >>> Waiting for reset to be done......
  # >>> Rest done register value:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0x13CB3E2 bits: 00000001001111001011001111100010

  # >>> Rest is done.
  # >>> Reset control register value after GPIO reset is done:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0xD34C1D bits: 00000000110100110100110000011101

  # >>> Reset done register value after GPIO reset is done:
  # >>> [ Bits - PRINT_BITS "u32" ] - 0x13CB3E2 bits: 00000001001111001011001111100010
#+END_SRC


** Tips about how to quit =minicom=

In the Linux version, you can press ~Ctrl+q~ or ~Ctrl+a, z~ to quit =minicom=.

In Macos version, my keyboard doesn't work with win-key combination, so I have to run ~killall minicom~ t quit.
