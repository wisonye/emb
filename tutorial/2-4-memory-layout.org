* Memory layout

Your program will be compiled as the =ELF (Executable and Linkable Format)=, the most commonly supported format by ARM-based embedded systems. Here is the [[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF wiki-link]] just in case you want to know more about it.

The processor must load the instructions and data of your (machine code) program into data memory (SRAM) before the program starts to run. That leads you to the next concept of =Memory (mapping) Layout=.

#+BEGIN_SRC text
                                                    |
                 Memory Layout                      |               SRAM Runtime
                   Overview                         |              Memory  Layout
   ==========================================       |          =====================
  /                                          \      |         /                     \
                                                    |
                                                    |
             | <---- 32 bit (4 bytes) ----> |       |                                 
  0xFFFFFFFF --------------------------------       |                                   
                                                    |          /-  ******************  - SRAM end
                                                    |          |         stack
                                                    |          |   ******************                 
                                                    |          |           |                            
             Reserved                               |          |           v
                                                    |          |                                        
                                                    |          |           ^
                                                    |   /----> |           |                            
                                                    |   |      |   ******************                 
             --------------------------------       |   |      |          heap
             Cortex-M0+ internal registers          |   |      |   ******************
  0xE0000000 --------------------------------       |   |      |   uninitialized data
             IOPORT Registers                       |   |      |       .bss
  0xD0000000 --------------------------------       |   |      |   ******************
             AHB-Lite Peripherals                   |   |      |   initialized data
  0x50000000 --------------------------------       |   |      |       .data 
             APB Peripherals                        |   |      \-  ****************** - SRAM start
  0x40000000 --------------------------------       |   |      /-
             SRAM (Data memory)               ------|---/ /--> |       .text/code
  0x20000000 --------------------------------       |     |    \-  ******************
             XIP (Flash, Instruction memory)  ------|-----/                           
  0x10000000 --------------------------------       |
             ROM                                    |
  0x00000000 --------------------------------       |
#+END_SRC

The above diagram is the =RP2040= address map, with the lower address at the bottom, and the higher address at the top, let's break it down and understand it step-by-step:


** How to read the above digram

The left part is the =RP2040= memory layout described in its datasheet, I just visualized it.

The right part is the SRAM (data memory) runtime layout (the memory layout when your program is running), the typical layout of a simple computer's program memory with following sections/segmentations:

| Section | Description                                                                       |
|---------+-----------------------------------------------------------------------------------|
| Stack   | Function call stack (local vars, arguments, return value), including =main()=       |
| Heap    | All data objects that an application creates dynamically at runtime               |
| BSS     | Contains global or static variables that are uninitialized or initialized to zero |
| Data    | Contains global or static variables that the program gives some initial values    |
| Text    | Contains executable code and is generally read-only and fixed size                |

As you can see all those memory sections are living inside the SRAM (the physical on-chip data memory) except the =text/code= section is mapped to the Flash (instruction memory), as =XIP= doesn't need to load code into RAM.

Also, the =heap= and the =stack= at the opposite end of a memory region, and they grow in different directions: the stack starts from the top, and the heap starts from the bottom. Variables are dynamically allocated or removed from the heap or stack, the size of the heap and stack changes at runtime. The heap grows up toward the large memory address, and the stack grows down toward the small memory address. Growing in opposite directions allows the heap and stack to take full advantage of the free memory region. When the stack meets the heap, free memory space is exhausted.


** Why address range ends with =0xFFFFFFFF=

=RP2040 (Cortex M0+)= is 32bit MCU, that's why its memory address has 32 bits which means 4bytes, that's why the max available addressable memory location is =0xFFFFFFFF=.

That said in a 32bit processor, it supports maximum around =4GB= memory:

=0xFFFFFFFF / 1024 / 1024 / 1024 = 3.9999999990686774=

That's enough for most of the MCUs.


** Why the XIP (Flash) end address and SRAM start address is =0x20000000=

XIP (Flash) starts from =0x10000000=, and =RP2040= supports up to =16MB= external flash memory, that said the entire flash memory range should between =0x10000000= and =0x10000000 + 16MB=:

=16MB = 16 * 1024 * 1024 = 16777216 (0x1000000)=


That's why end address should be =0x11000000=, but why the gap is totally =0x10000000 (256MB)=???

Usually, the address range jumps by 256MB/512MB/1GB to make sure the gap is big enough for the incoming model with a bigger size RAM or Flash. Maybe Raspberry Pi wants to introduce a 256MB flash model in the future. who knows :)

Same reason, the SRAM has a total =512MB= addressable space range (=0x40000000= - =0x20000000=).


** How to prove the =stack= address starts from the end of the SRAM and grows down

SRAM start address is =0x20000000= and the end address should be =0x20000000 + 264KB = (0x20042000)=.

So, I created a very simple C program to print the =pc (Program Counter)= and =sp (Stack Pointer)= address, it's located in =c-demos/print-pointer-address=.

Here is the result it prints out:

#+BEGIN_SRC bash
  # Welcome to minicom 2.8

  # OPTIONS:
  # Compiled on Jan  4 2021, 00:04:46.
  # Port /dev/tty.usbmodem14301, 15:16:36

  # Press Meta-Z for help on special keys

  >>> [ Print Pointer Address Demo]
  >>> Program counter pointer address: 0x1000031A
  >>> Stack pointer address: 0x20041FF4
#+END_SRC

As you can see the stack pointer address is =0x20041FF4=, it's only 12 bytes (0x20042000 - 0x20041FF4 = 12) below the SRAM end address:)

