* What is =MCU=, =SOC= and =SBC=?

- =MCU= stands for =Microcontroller Unit=.
- =SOC= stands for =System-on-chip=.
- =SBC= stands for =Single Board Computer=.

Summaries, =MCU= and =SOC= sound like the same thing which is an all-in-one chip. It includes all the following hardware components inside a single chip:

- CPU (even FPU)
- RAM (Random Access Memory)
- ROM (Read-only Memory)
- Flash (non-volatile RAM, like the hard drive to store your program)
- Any related I/O

It's basically a very small computer on an =IC= (integrated circuit) or microchip. Compare to =SBC=, it has the following differences:

- =MCU= usually with limited hardware power resources which suit for non-heavy computation solution.

- =MCU= can deal with fast power on and off (or power-off accidentally) at any given time and it won't hurt your program which =SBC= can't do like that (as it got =OS= on it).

- =MCU= doesn't have =OS= at all (even if you use =FreeRTOS=, it actually just a task scheduler), your program will be the **only** one program running there with full control and real-time responsiveness.


** =STM32= and =RP2040= MCUs

*** =STM32=

=STM32= is a family of *32-bit* =MCU= by =STMicroelectronics=. The =STM32= chips are grouped into related series that are based around the same *32-bit* ARM processor core, such as:

- Cortex-M33F
- Cortex-M7F
- Cortex-M4F
- Cortex-M3
- Cortex-M0+
- Cortex-M0

The =F= means with =FPU= (Floating Point Unit).

Internally, each =MCU= consists of the processor core, static RAM, flash memory, debugging interface, and various peripherals.

The company behind the =ARM= trademark (=Arm Holdings=) doesn't actually manufacture chips for purchase. Instead, their primary business model is to just design parts of chips. They will then license those designs to manufacturers, who will in turn implement the designs (perhaps with some of their own tweaks) in the form of physical hardware that can then be sold.


*** =RP2040=

=RP2040= is the debut microcontroller from =Raspberry Pi=. It brings our signature values of high performance, low cost, and ease of use to the microcontroller space.

With a large on-chip memory, symmetric dual-core processor complex, deterministic bus fabric, and rich peripheral set augmented with our unique Programmable I/O (=PIO=) subsystem, it provides professional users with unrivalled power and flexibility. With detailed documentation, a polished MicroPython port, and a =UF2= bootloader in ROM, it has the lowest possible barrier to entry for beginner and hobbyist users.

=RP2040= is a stateless device, with support for cached execute-in-place from external =QSPI= memory. This design decision allows you to choose the appropriate density of non-volatile storage for your application, and to benefit from the low pricing of commodity Flash parts.

=RP2040= is manufactured on a modern 40nm process node, delivering high performance, low dynamic power consumption, and low leakage, with a variety of low-power modes to support extended-duration operation on battery power

Key features:

- Dual ARM Cortex-M0+ @ 133MHz

- 264kB on-chip SRAM in six independent banks

- Support for up to 16MB of off-chip Flash memory via dedicated QSPI bus

- DMA controller

- Fully-connected AHB crossbar

- Interpolator and integer divider peripherals

- On-chip programmable LDO to generate core voltage

- 2 on-chip PLLs to generate USB and core clocks

- 30 GPIO pins, 4 of which can be used as analogue inputs

- Peripherals

    - 2 UARTs

    - 2 SPI controllers

    - 2 I2C controllers

    - 16 PWM channels

    - USB 1.1 controller and PHY, with host and device support

    - 8 PIO state machine

