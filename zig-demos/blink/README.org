* Zig Blink onboard LED Demo

** How to configure

1. Change your pico board name

  #+BEGIN_SRC zig
    const pico_board = "pico_w";
  #+END_SRC 

  The default pico board name is defined in ~build.zig~, if that's NOT your pico board, change it before building the project.


2. Change your zig obj file name to match your cmake project name

  #+BEGIN_SRC zig
    const output_obj_filename = "zig-blink.o";
  #+END_SRC 

  It's defined in ~build.zig~, plz make sure the filename (without the ~.o~) is the same value as the cmake project name in the ~CMakeLists.txt~ (e.g. ~project(zig-blink)~)!!!

  Make sure to change both of them to the same value!!!

  
** How to build

1. You need to provide the =PICO_SDK_PATH= env var and set to your =pico-sdk= git clone folder.

    For example:

    #+BEGIN_SRC bash
      # If you need a fresh build
      rm -rf zig-out zig-cache build

      PICO_SDK_PATH=~/pico/pico-sdk zig build
    #+END_SRC


2. Optional, you need provide the =PICO_TOOLCHAIN_PATH= env var if ~arm-none-eabi-gcc~ doesn't in your ~$PATH~.

    For example:

    #+BEGIN_SRC bash
      # If you need a fresh build
      rm -rf zig-out zig-cache build

      PICO_SDK_PATH=~/pico/pico-sdk \
      PICO_TOOLCHAIN_PATH=~/Downloads/arm-gnu-toolchain/bin \
      zig build
    #+END_SRC


3. Optional, if you're using MacOS and =brew= or custom install for the =arm-none-eabi-gcc=, then you need to provide the ARM version ~stdio.h~ include path like this.

   For example:

   #+BEGIN_SRC bash
     # If you need a fresh build
     rm -rf zig-out zig-cache build

     #
     # MacOS Inetl
     #
     PICO_SDK_PATH=~/pico/pico-sdk \
     ARM_STD_INCLUDE=~/Downloads/arm-gnu-toolchain/arm-none-eabi/include \
     zig build

     #
     # MacOS M1/M2
     #
     PICO_SDK_PATH=~/pico/pico-sdk \
     ARM_STD_INCLUDE=/Applications/ArmGNUToolchain/12.3.rel1/arm-none-eabi/arm-none-eabi/include \
     zig build
   #+END_SRC


** How to flash the ~uf2~ to your pico

Run ~./flash_linux.sh~ or ~/.flash_macos.sh~ script, it will print out the usage and example if you don't provide any parameter.

#+BEGIN_SRC bash
  # For linux
  doas ./flash_linux.sh zig-blink

  # For macos
  ./flash_macos.sh zig-blink
#+END_SRC



** How to view ~printf~ debug output

Run ~./minicom.sh~ script, it will print out the usage and example if you don't provide any parameter.

#+BEGIN_SRC bash
  Welcome to minicom 2.9

  OPTIONS: I18n
  Compiled on Sep 23 2023, 19:55:08.
  Port /dev/ttyACM0, 10:55:14

  Press CTRL-A Z for help on special keys

  >>> [ Zig blinking onboard LED ]
#+END_SRC
